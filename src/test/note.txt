Spring:
    1.导入坐标
        Spring: spring-context  ==>  使用Spring
                spring-test     ==>  Spring集成junit
        测试：junit  ==>  单元测试
    2.创建applicationContext.xml
        2.1 <!--配置包扫描-->   ————>   扫描注解@,将对交给Spring容器
    3.创建service
    4.创建serviceImpl  (添加@Service)
    5.测试
        5.1 @RunWith(SpringJUnit4ClassRunner.class)
        5.2 @ContextConfiguration("classpath:applicationContext.xml")
        5.3 @Autowired
        5.4 @Test   ————>   调用方法
#Spring关注service/dao

SpringMVC：
    1.导入坐标
        SprinMVC：spring-webmvc  ==>  webapp
                  spring-web
    2.web.xml
        2.1 前端控制器  DispatcherServlet
        2.2 编码过滤器  Filter
        2.3 设置全局参数&配置监听器 listener (Spring集成SpringMVC)
    3.spring-mvc.xml
        3.1 配置包扫描，扫描controller
        3.2 视图解析器，前后缀
        3.3 静态页面访问
        3.4 MVC注解驱动,json数据返回
    4.Controller(控制器)
        1. @RequestMapping
        2. 注入service (Spring集成SpringMVC)

MyBatis:
        1.导入坐标
            MyBaties: mybatis
            Mysql：mysql-connector-java  ==> 数据库
                   druid  ==>  连接池
            日志： log4j  ==>  日志包
                  slf4j-log4j12  ==>  集成时引入中间键，可查看日志信息
        2.mapper
            1.创建接口
        3.创建mapper.xml(目录使用/)
            2.写入sql
        4.sqlMapConfig核心文件
            4.1 加载数据库连接配置文件   ————>   properties
            4.2 起别名   ————>   typeAliases(批量操作)
            4.3 数据源环境配置标签   ————>   environments
            4.4 加载映射配置文件   ————>   mappers(批量操作)
        5.测试
            5.1 Resources
            5.2 new sqlSessionFactoryBuild().Build(is)
            5.3 openSession(true)
            5.4 getMapper(class)
                5.5 mapper.methond()
            5.6 close()
    Spring + MyBatis
        1.导入坐标
            mybatis-spring  ==>  集成配置
        2.applicationContext
            2.1 添加数据源文件
            2.2 配置sqlSessionFactory工厂(SqlSessionFactoryBean)   ————>   集成mybatis
                    别名替换方式   ————>   typeAliasesPackage(批量)
            2.3 配置接口扫描 MapperScannerConfigurer   ————>   生成代理类对象，交予Spring容器
                    basePackage
        3.service
            3.1 定义接口 usermapper
            3.2 调用方法
        4.DaoSupport   ————>   Dao支持
            4.1 导入坐标 spring-jdbc
                        spring-tx

整体测试：
    1.list.jsp：
        1.1 导入坐标   ————>   识别Serlvet
            Servlet:
                javax.servlet-api
                jsp-api
            jstl:
                jstl  ==>  jsp代码
    2.引入jsp.core
        <c:foreach items="" varStatus="" var="">

CRUD:
    1.分页
        1.1 导入分页坐标
                pagehelper
        1.2 applicationContext.xml配置插件
        1.3 创建PageBean<T>实体类
        1.4 service
                1.4.1 设置分页数据 startPage()
                1.4.2 分页查询
        1.5 controller
        1.6 list,修改PageBean.list
    2.添加
        2.1 add.jsp
        2.2 controller 中定义add方法
        2.3 list.jsp 修改添加联系人href属性

        province实体类
        provinceMapper查询province对象
        2.4 userMapper 1对1 地址查询resultMap

    页面json数据转换
        1.1 导入坐标
                 jackson-databind
        1.2 创建controller
        1.3 定义接口
        1.4 实现类